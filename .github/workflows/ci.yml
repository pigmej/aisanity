name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build the project
        run: bun run build

      - name: Verify cross-compilation targets
        run: |
          bun build ./src/index.ts --compile --target bun-linux-x64 --outfile ./test-aisanity-linux-x64
          bun build ./src/index.ts --compile --target bun-linux-arm64 --outfile ./test-aisanity-linux-arm64
          bun build ./src/index.ts --compile --target bun-darwin-x64 --outfile ./test-aisanity-darwin-x64
          bun build ./src/index.ts --compile --target bun-darwin-arm64 --outfile ./test-aisanity-darwin-arm64
          rm -f test-aisanity-*

      - name: Run linting
        run: bun run lint || echo "Linting issues found (non-fatal)"

      - name: Pre-pull Docker images for tests
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Pre-pulling alpine:latest for Docker integration tests..."
          docker pull alpine:latest || echo "Pre-pull failed, tests will pull on-demand"
          docker images alpine
        continue-on-error: true

      - name: Run tests
        run: bun test

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Cleanup Docker containers
        if: matrix.os == 'ubuntu-latest' && always()
        run: |
          echo "Cleaning up any remaining test containers..."
          docker ps -aq --filter "label=aisanity.workspace" | xargs -r docker rm -f || true
          docker system prune -f || true

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit || echo "No audit available"
